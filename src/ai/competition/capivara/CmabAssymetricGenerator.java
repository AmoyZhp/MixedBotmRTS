/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ai.competition.capivara;

import ai.CMAB.ActionGenerator.*;
import ai.abstraction.pathfinding.AStarPathFinding;
import ai.asymmetric.ManagerUnits.IManagerAbstraction;
import ai.configurablescript.BasicExpandedConfigurableScript;
import ai.core.AI;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import rts.GameState;
import rts.PhysicalGameState;
import rts.PlayerAction;
import rts.ResourceUsage;
import rts.UnitAction;
import rts.UnitActionAssignment;
import rts.units.Unit;
import rts.units.UnitTypeTable;
import util.Pair;

/**
 *
 * @author rubens
 */
public class CmabAssymetricGenerator implements ICMAB_ActionGenerator{
    private final List<AI> scripts;
    private final GameState gs_to_start_from;
    PhysicalGameState pgs;
    ResourceUsage base_ru;
    private final int playerForThisComputation;
    private final List<Pair<Unit, List<UnitAction>>> choices;
    private long size = 1;  // this will be capped at Long.MAX_VALUE;
    private final IManagerAbstraction behaviorAbs;
    HashSet<Unit> unitsControled = new HashSet<>();
    

    public CmabAssymetricGenerator( GameState gs_to_start_from, int playerForThisComputation, UnitTypeTable a_utt, String Behavior, int qtdUNits, List<AI> abstraction) throws Exception{
        //this.scripts = new ArrayList<>();
        this.gs_to_start_from = gs_to_start_from;
        this.playerForThisComputation = playerForThisComputation;
        //this.behaviorAbs = new ManagerClosest(playerForThisComputation, 2);
        this.behaviorAbs = (IManagerAbstraction) Class.forName("ai.asymmetric.ManagerUnits."+Behavior).getConstructors()[0].newInstance(playerForThisComputation, qtdUNits);
        choices = new ArrayList<>();
        size = 1;
        scripts = abstraction;
        //all moves by units controled by behavior
        generatedMovesAsymmetric();
        //moves generated by scripts
        generatedMovesAbstractic();
        
        //System.out.println("size = " + size);
        //System.out.println("Choices = " + choices.toString());
        
         if (choices.isEmpty()) {
            System.err.println("Problematic game state:");
            System.err.println(gs_to_start_from);
            throw new Exception("Move generator for player " + playerForThisComputation + " created with no units that can execute actions! (status: " + gs_to_start_from.canExecuteAnyAction(0) + ", " + gs_to_start_from.canExecuteAnyAction(1) + ")");
        }
    }
    
    private void generatedMovesAbstractic() throws Exception{
        
        
        ArrayList<PlayerAction> playerActions = new ArrayList<>();
        for (AI script : scripts) {
            playerActions.add(script.getAction(playerForThisComputation, gs_to_start_from));
        }
        PlayerAction pa = new PlayerAction();
        for (Unit u : gs_to_start_from.getUnits()) {
            if (u.getPlayer() == playerForThisComputation && !unitsControled.contains(u)) {
                if (gs_to_start_from.getUnitActions().get(u) == null) {
                    List<UnitAction> l = getUnitActions(u, playerActions);
                    if (l.size() > 0 ) {
                        choices.add(new Pair<>(u, l));
                        // make sure we don't overflow:
                        long tmp = l.size();
                        if (Long.MAX_VALUE / size <= tmp) {
                            size = Long.MAX_VALUE;
                        } else {
                            size *= (long) l.size();
                        }
//                    System.out.println("size = " + size);
                    }
                }
            }
        }
        //System.out.println("---"+choices.toString());
    }
    
    protected final void generatedMovesAsymmetric() throws Exception{
        //unidades.clear();
        behaviorAbs.controlUnitsForAB(gs_to_start_from, unitsControled);
        //System.out.println("units"+ unitsControled.toString()); //removes
        // Generate the reserved resources:
        base_ru = new ResourceUsage();
        GameState gs = gs_to_start_from;
        pgs = gs.getPhysicalGameState();
        
        for(Unit u:pgs.getUnits()) {
            UnitActionAssignment uaa = gs.getUnitActions().get(u);
            if (uaa!=null) {
                ResourceUsage ru = uaa.action.resourceUsage(u, pgs);
                base_ru.merge(ru);
            }
        }
                
        for(Unit u:unitsControled) {
            if (u.getPlayer()==playerForThisComputation) {
                if (gs.getUnitActions().get(u)==null) {
                    List<UnitAction> l = u.getUnitActions(gs);
                    choices.add(new Pair<>(u,l));
                    // make sure we don't overflow:
                    long tmp = l.size();
                    if (Long.MAX_VALUE/size <= tmp) {
                        size = Long.MAX_VALUE;
                    } else {
                        size*=(long)l.size();
                    }
//                    System.out.println("size = " + size);
                }
            }
        }  
        //System.out.println("---Asymmetric--"+choices.toString());

    }

    @Override
    public long getSize() {
        return this.size;
    }

    @Override
    public List<Pair<Unit, List<UnitAction>>> getChoices() {
        return this.choices;
    }

    /**
     * make one collection of unitActions for the unit using all Actions
     *
     * @param u
     * @param playerActions
     * @return
     */
    private List<UnitAction> getUnitActions(Unit u, ArrayList<PlayerAction> playerActions) {
        HashSet<UnitAction> unAction = new HashSet<>();
        for (PlayerAction playerAction : playerActions) {
            unAction.add(playerAction.getAction(u));
        }
        //inserted wait action to fix move problem
        //unAction.add(new UnitAction(UnitAction.TYPE_NONE, 10));
        return new ArrayList<>(unAction);
    }
    
    
}
